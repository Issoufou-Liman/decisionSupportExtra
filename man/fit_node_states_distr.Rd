% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_node_states_distr.R
\name{fit_node_states_distr}
\alias{fit_node_states_distr}
\title{Fitting univariate distributions to Bayesain network nodes}
\usage{
fit_node_states_distr(bn, node, op = "proba", distr = "beta",
  method = "mme", start = NULL, fix.arg = NULL, discrete,
  keepdata = TRUE, keepdata.nb = 100, ...)
}
\arguments{
\item{bn}{an object of class \code{\link[bnlearn]{bn.fit}} or \code{\link[gRain]{grain-main}}.}

\item{node}{character string, the label of the node which conditional distribution is of interest.}

\item{op}{a vector of character strings, the type of returned value: either probabilities or raw data sampled from the posterior distribution}

\item{distr}{A character string \code{"name"} naming a distribution for which the corresponding
    density function \code{dname}, the corresponding distribution function \code{pname} and the 
    corresponding quantile function \code{qname} must be defined, or directly the density function.}

\item{method}{A character string coding for the fitting method: 
    \code{"mle"} for 'maximum likelihood estimation', \code{"mme"} for 'moment matching estimation', 
    \code{"qme"} for 'quantile matching estimation' and \code{"mge"} for 'maximum goodness-of-fit estimation'.}

\item{start}{A named list giving the initial values of parameters of the named distribution
    or a function of data computing initial values and returning a named list.
    This argument may be omitted (default) for some distributions for which reasonable 
    starting values are computed (see the 'details' section of  \code{\link{mledist}}). 
    It may not be into account for closed-form formulas.}

\item{fix.arg}{An optional named list giving the values of fixed parameters of the named distribution
    or a function of data computing (fixed) parameter values and returning a named list. 
    Parameters with fixed value are thus NOT estimated by this maximum likelihood procedure.
    The use of this argument is not possible if \code{method="mme"} and a closed-form formula is used.}

\item{discrete}{ If TRUE, the distribution is considered as discrete.
    If \code{discrete} is missing, 
	  \code{discrete} is automaticaly set to \code{TRUE} when \code{distr} belongs to 
	  \code{"binom"}, \code{"nbinom"}, \code{"geom"},
    \code{"hyper"} or \code{"pois"} and to \code{FALSE} in the other cases. It is thus recommended
    to enter this argument when using another discrete distribution. This argument will not directly affect
    the results of the fit but will be passed to functions \code{\link{gofstat}}, \code{\link{plotdist}} 
    and \code{\link{cdfcomp}}.  }

\item{keepdata}{a logical. If \code{TRUE}, dataset is returned, 
    otherwise only a sample subset is returned.}

\item{keepdata.nb}{When \code{keepdata=FALSE}, the length (>1) of the subset returned.}

\item{...}{Further arguments to be passed to generic functions, or to one of the functions
    \code{"mledist"},  \code{"mmedist"}, \code{"qmedist"} or \code{"mgedist"}
    depending of the chosen method. See \code{\link{mledist}}, \code{\link{mmedist}}, \code{\link{qmedist}}, 
    \code{\link{mgedist}} for details on parameter estimation.}
}
\description{
Fitting univariate distributions to the posterior distribution of a Bayesian network node.
}
\details{
see \code{\link[fitdistrplus]{fitdist}}.
}
\examples{
library (gRain)
library(bnlearn)
## setting a bayesian network with gRain
Soil_type <- cptable (~Soil_type, values = c(0.05, 0.55, 0.4),
levels = c('Sandy', 'Loamy', 'Clayey'))
Manure_application <- cptable(~Manure_application, values = c(0.3, 0.7),
levels = c('FALSE', 'TRUE'))
Soil_water_holding_capacity_tmp <- make_gRain_CPT(
 parent_effects = list(c(0, 2.5, 3), c(0, 2)),
 parent_weights = c(2,1),
 b = 3,
 child_prior = c(0.2,0.5,0.3),
 child_states = c('Low', 'Medium', 'High'),
 parent_states = list(c('Sandy', 'Loamy', 'Clayey'), c('FALSE', 'TRUE'))
)
Soil_water_holding_capacity_values <- Soil_water_holding_capacity_tmp$values
Soil_water_holding_capacity_levels <- Soil_water_holding_capacity_tmp$levels
Soil_water_holding_capacity <- cptable (
~Soil_water_holding_capacity|Soil_type:Manure_application,
values = Soil_water_holding_capacity_values,
levels = Soil_water_holding_capacity_levels)
## Compile conditional probability tables
network <- compileCPT(list(Soil_type, Manure_application, Soil_water_holding_capacity))
## Graphical Independence Network ####
network <- grain(network)
## Use grain object (gRain package)
fit_node_states_distr (bn = network, node = "Soil_water_holding_capacity", gof="KS")

## converting the grain bayesian network to bn.fit
network_bn_fit <- as.bn.fit(network)
## Use bn.fit object (bnlearn package)
fit_node_states_distr (bn = network_bn_fit,
node = "Soil_water_holding_capacity", distr = c("beta", "norm", "gamma"))
}
\references{
Marie Laure Delignette-Muller, Christophe Dutang (2015). fitdistrplus: An R Package for Fitting Distributions. Journal of Statistical Software, 64(4), 1-34. http://www.jstatsoft.org/v64/i04/.
}
\seealso{
\code{\link[fitdistrplus]{fitdist}}.
}
\author{
Issoufou Liman
}
