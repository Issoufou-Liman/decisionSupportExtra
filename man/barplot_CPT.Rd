% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/barplot_CPT.R
\name{barplot_CPT}
\alias{barplot_CPT}
\title{A ggplot wrapper for visualizing Conditional Probability Table (CPT)}
\usage{
barplot_CPT(
  bn,
  target_node,
  bar_width = 0.25,
  ncol_facet = NULL,
  n_pages = 1,
  show_states_only = FALSE,
  separator = "\\n"
)
}
\arguments{
\item{bn}{A grain object from gRain package (see \code{\link[gRain]{grain-main}}) or a \code{\link[bnlearn]{bn.fit}} object from bnlearn package.}

\item{target_node}{A single character indicating the name of the node which CPT is to be plotted.}

\item{bar_width}{numeric. The width of the bars in the barplot (see \code{\link[ggplot2]{geom_bar}}).}

\item{ncol_facet}{A single integer specifying the number of facet columns (see ncol argument in \code{\link[ggplot2]{geom_bar}}).}

\item{n_pages}{A single integer specifying the number of pages over which the plot is be spread over. This can be particularly useful for lisibility in large CPT plot.}

\item{show_states_only}{logical. Should both node names and their respective states be shown in the strip labels? If TRUE only the state labels are shown.}

\item{separator}{character or regular expression. How should node names and their states be separated?}
}
\value{
A single ggplot object (or a list of these, if ncol_facet > 1) such that one could customize it with \code{\link[ggplot2]{theme}} and other ggplot updating utilites.
}
\description{
Take a bayesian network, a node of interest along with other optional ggplot paramaters to produce a barchart corresponding to the CPT of the node of interest given the Bayesian network.
}
\details{
It often difficult to know whether something went wrong or not looking at the CPT generated by \code{\link[decisionSupport]{make_CPT}}. \code{\link[decisionSupportExtra]{barplot_CPT}} may help to graphically visualise the generated CPT by \code{\link[decisionSupportExtra]{make_gRain_CPT}} and fix potential mis-specification. This function make visualization and examination of these CPTs easier.
}
\examples{
library (gRain)
library(ggplot2)
## Simple nodes specification using gRain package.
Soil_type <- cptable (~Soil_type, values = c(0.05, 0.55, 0.4),
levels = c('Sandy', 'Loamy', 'Clayey'))
Manure_application <- cptable(~Manure_application, values = c(0.3, 0.7),
levels = c('FALSE', 'TRUE'))
## Complex nodes specification.
Soil_water_holding_capacity_tmp <- make_gRain_CPT(
 parent_effects = list(c(0, 2.5, 3), c(0, 2)),
 parent_weights = c(2,1),
 b = 3,
 child_prior = c(0.2,0.5,0.3),
 child_states = c('Low', 'Medium', 'High'),
 parent_states = list(c('Sandy', 'Loamy', 'Clayey'), c('FALSE', 'TRUE'))
)
Soil_water_holding_capacity_values <- Soil_water_holding_capacity_tmp$values
Soil_water_holding_capacity_levels <- Soil_water_holding_capacity_tmp$levels
Soil_water_holding_capacity <- cptable (
~Soil_water_holding_capacity|Soil_type:Manure_application,
values = Soil_water_holding_capacity_values,
levels = Soil_water_holding_capacity_levels)
## Compile conditional probability tables
network <- compileCPT(list(Soil_type, Manure_application, Soil_water_holding_capacity))
## Graphical Independence Network ####
network <- grain(network)
network
barplot_CPT (network, "Soil_water_holding_capacity")
}
\seealso{
\code{\link[decisionSupportExtra]{make_gRain_CPT}}.
}
\author{
Issoufou Liman
}
