% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_node_states_estimates.R
\name{make_node_states_estimates}
\alias{make_node_states_estimates}
\title{Create \code{\link[decisionSupport]{estimate}} for Bayesain network node}
\usage{
make_node_states_estimates(bn, node, op, distr = "beta", state_effects,
  evidence = NULL, plot = TRUE, show.output = TRUE)
}
\arguments{
\item{bn}{an object of class bn.fit.}

\item{node}{character string, the label of the node which conditional distribution is of interest.}

\item{op}{a vector of character strings, the type of returned value: either probabilities or raw data sampled from the posterior distribution}

\item{distr}{A character string \code{"name"} naming a distribution for which the corresponding
    density function \code{dname}, the corresponding distribution function \code{pname} and the 
    corresponding quantile function \code{qname} must be defined, or directly the density function.}

\item{state_effects}{numeric vector specifying the relative weight factor of each state in the final estimate.}

\item{evidence}{a name value pair:a named character vector which values are node states and names are node names.}

\item{plot}{logical. Should the quantile function be ploted? default to TRUE}

\item{show.output}{Should the computation be verbose? default to TRUE.}
}
\description{
create a multivariate \code{\link[decisionSupport]{estimate}} object for Bayesian network node.
The function samples from the posterior distribution of the Bayesian network to construct an
object of class \code{\link[decisionSupport]{estimate}} accounting for each state of the node.
}
\details{
see \code{\link[decisionSupport]{estimate}}.
}
\examples{
library (gRain)
library(bnlearn)
## setting a bayesian network with gRain
Soil_type <- cptable (~Soil_type, values = c(0.05, 0.55, 0.4),
levels = c('Sandy', 'Loamy', 'Clayey'))
Manure_application <- cptable(~Manure_application, values = c(0.3, 0.7),
levels = c('FALSE', 'TRUE'))
Soil_water_holding_capacity_tmp <- make_gRain_CPT(
 parent_effects = list(c(0, 2.5, 3), c(0, 2)),
 parent_weights = c(2,1),
 b = 3,
 child_prior = c(0.2,0.5,0.3),
 child_states = c('Low', 'Medium', 'High'),
 parent_states = list(c('Sandy', 'Loamy', 'Clayey'), c('FALSE', 'TRUE'))
)
Soil_water_holding_capacity_values <- Soil_water_holding_capacity_tmp$values
Soil_water_holding_capacity_levels <- Soil_water_holding_capacity_tmp$levels
Soil_water_holding_capacity <- cptable (
~Soil_water_holding_capacity|Soil_type:Manure_application,
values = Soil_water_holding_capacity_values,
levels = Soil_water_holding_capacity_levels)
## Compile conditional probability tables
network <- compileCPT(list(Soil_type, Manure_application, Soil_water_holding_capacity))
## Graphical Independence Network ####
network <- grain(network)
## Use grain object (gRain package)
fit_node_states_distr (bn = network, node = 'Soil_water_holding_capacity', gof='KS')

## converting the grain bayesian network to bn.fit
network_bn_fit <- as.bn.fit(network)
## Use bn.fit object (bnlearn package)
fit_node_states_distr (bn = network_bn_fit,
node = 'Soil_water_holding_capacity', distr = c('beta', 'norm', 'gamma'))
}
\references{
Eike Luedeling and Lutz Goehring (2018). decisionSupport: Quantitative Support of Decision Making under Uncertainty.
R package version 1.103.8. https://CRAN.R-project.org/package=decisionSupport
}
\seealso{
\code{\link[decisionSupport]{estimate}}.
}
\author{
Issoufou Liman
}
